services:
  # Database
  sw-ing-db:
    build:
      context: .
      dockerfile: config/db/Dockerfile
    image: sw-ing-db
    platform: 'linux/x86_64'
    container_name: SW-ING-DB
    restart: unless-stopped
    volumes:
      - dev_swing_db:/etc/mysql
      - ./config/db/my.cnf:/etc/mysql/my.cnf
    ports:
      - 3306:3306  # MySQL: http://localhost:3306
    environment:
      MYSQL_DATABASE: sw-ing
      MYSQL_USER: docker
      MYSQL_PASSWORD: docker
      MYSQL_ROOT_PASSWORD: docker
    networks:
      - sw-ing

  # Redis + Redis Commander
  redis:
    image: library/redis:6-alpine
    container_name: SW-ING-Redis
    ports:
      - 6379:6379  # Redis: http://localhost:6379
    networks:
      - sw-ing

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: SW-ING-RedisCommander
    environment:
      - REDIS_HOSTS=local-0:redis:6379:0,local-1:redis:6379:1
      - HTTP_USER=root
      - HTTP_PASSWORD=qwerty
    ports:
      - 8081:8081  # Redis Commander: http://localhost:8081
    depends_on:
      - redis
    networks:
      - sw-ing

  # Nginx Web Server
  api-web:
    image: library/nginx:1.20.1
    container_name: ApiWeb
    volumes:
      - ./backend:/var/www/api
      - ./config/web/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - sw-ing
    ports:
      - 8083:80  # API Web: http://localhost:8080
    depends_on:
      - api-php

  # PHP Application
  api-php:
    build:
      context: .
      dockerfile: config/php/Dockerfile
    image: api-php
    container_name: ApiPhp
    environment:
      DB_DATABASE: sw-ing
      DB_HOST: sw-ing-db
      DB_PORT: 3306
      DB_USERNAME: docker
      DB_PASSWORD: docker
    volumes:
      - ./backend:/var/www/api
      - ./config/php/php.ini:/usr/local/etc/php/php.ini
    networks:
      - sw-ing
    depends_on:
      - sw-ing-db
    command: >
      sh -c "
      php artisan config:cache &&
      php artisan route:cache &&
      php artisan view:cache &&
      if [ $(php artisan migrate --pretend | grep -c 'Nothing to migrate') -eq 1 ]; then
        echo 'Migrations already applied.';
      else
        echo 'Running migrations...';
        php artisan migrate --force;
      fi &&
      if [ $(php artisan db:seed | grep -c 'Database seeding completed') -eq 0 ]; then
        echo 'Database already seeded.';
      else
        echo 'Running seeders...';
        php artisan db:seed --force;
      fi &&
      php-fpm
      "

  # Frontend - NodeJS
  frontend:
    depends_on:
    - api-php
    build:
      context: .
      dockerfile: config/nodejs/Dockerfile
    image: frontend
    container_name: Frontend
    volumes:
      - ./frontend:/usr/src/frontend
      - /usr/src/frontend/node_modules
    ports:
      - 3002:3000  # Frontend (port 3000): http://localhost:3002
    command: npm run dev
    networks:
      - sw-ing

  # phpMyAdmin
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: SW-ING-phpMyAdmin
    environment:
      PMA_HOST: sw-ing-db
      MYSQL_ROOT_PASSWORD: docker
    ports:
      - 8082:80  # phpMyAdmin: http://localhost:8082
    depends_on:
      - sw-ing-db
    networks:
      - sw-ing

networks:
  sw-ing:
    name: sw-ing
    driver: bridge

volumes:
  dev_swing_db:
    driver: local
